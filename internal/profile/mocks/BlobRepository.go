// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	blob "github.com/davidsbond/autopgo/internal/blob"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// MockBlobRepository is an autogenerated mock type for the BlobRepository type
type MockBlobRepository struct {
	mock.Mock
}

type MockBlobRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBlobRepository) EXPECT() *MockBlobRepository_Expecter {
	return &MockBlobRepository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, key
func (_m *MockBlobRepository) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockBlobRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockBlobRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockBlobRepository_Expecter) Delete(ctx interface{}, key interface{}) *MockBlobRepository_Delete_Call {
	return &MockBlobRepository_Delete_Call{Call: _e.mock.On("Delete", ctx, key)}
}

func (_c *MockBlobRepository_Delete_Call) Run(run func(ctx context.Context, key string)) *MockBlobRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBlobRepository_Delete_Call) Return(_a0 error) *MockBlobRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBlobRepository_Delete_Call) RunAndReturn(run func(context.Context, string) error) *MockBlobRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *MockBlobRepository) List(ctx context.Context, filter blob.ListFilter) ([]blob.Object, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []blob.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, blob.ListFilter) ([]blob.Object, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, blob.ListFilter) []blob.Object); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]blob.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, blob.ListFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlobRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockBlobRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter blob.ListFilter
func (_e *MockBlobRepository_Expecter) List(ctx interface{}, filter interface{}) *MockBlobRepository_List_Call {
	return &MockBlobRepository_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *MockBlobRepository_List_Call) Run(run func(ctx context.Context, filter blob.ListFilter)) *MockBlobRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(blob.ListFilter))
	})
	return _c
}

func (_c *MockBlobRepository_List_Call) Return(_a0 []blob.Object, _a1 error) *MockBlobRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlobRepository_List_Call) RunAndReturn(run func(context.Context, blob.ListFilter) ([]blob.Object, error)) *MockBlobRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewReader provides a mock function with given fields: ctx, key
func (_m *MockBlobRepository) NewReader(ctx context.Context, key string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for NewReader")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlobRepository_NewReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewReader'
type MockBlobRepository_NewReader_Call struct {
	*mock.Call
}

// NewReader is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockBlobRepository_Expecter) NewReader(ctx interface{}, key interface{}) *MockBlobRepository_NewReader_Call {
	return &MockBlobRepository_NewReader_Call{Call: _e.mock.On("NewReader", ctx, key)}
}

func (_c *MockBlobRepository_NewReader_Call) Run(run func(ctx context.Context, key string)) *MockBlobRepository_NewReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBlobRepository_NewReader_Call) Return(_a0 io.ReadCloser, _a1 error) *MockBlobRepository_NewReader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlobRepository_NewReader_Call) RunAndReturn(run func(context.Context, string) (io.ReadCloser, error)) *MockBlobRepository_NewReader_Call {
	_c.Call.Return(run)
	return _c
}

// NewWriter provides a mock function with given fields: ctx, key
func (_m *MockBlobRepository) NewWriter(ctx context.Context, key string) (io.WriteCloser, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for NewWriter")
	}

	var r0 io.WriteCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.WriteCloser, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.WriteCloser); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.WriteCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBlobRepository_NewWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewWriter'
type MockBlobRepository_NewWriter_Call struct {
	*mock.Call
}

// NewWriter is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockBlobRepository_Expecter) NewWriter(ctx interface{}, key interface{}) *MockBlobRepository_NewWriter_Call {
	return &MockBlobRepository_NewWriter_Call{Call: _e.mock.On("NewWriter", ctx, key)}
}

func (_c *MockBlobRepository_NewWriter_Call) Run(run func(ctx context.Context, key string)) *MockBlobRepository_NewWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockBlobRepository_NewWriter_Call) Return(_a0 io.WriteCloser, _a1 error) *MockBlobRepository_NewWriter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBlobRepository_NewWriter_Call) RunAndReturn(run func(context.Context, string) (io.WriteCloser, error)) *MockBlobRepository_NewWriter_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBlobRepository creates a new instance of MockBlobRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBlobRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBlobRepository {
	mock := &MockBlobRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
